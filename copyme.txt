/*********************************************************************
	 *********************************************************************
	 Performs subSyte on a 4x4 matrix, returns result in a new 4x4 array
	 *********************************************************************
	 *********************************************************************/
	public static int[][] subBytes(int[][] bytesIn)
	{
		int[][] bytesOut = new int[4][4];							// Create a new 4x4 int array
		for(int i = 0; i < 4; i++)
		{
			for (int j = 0; j < 4; j++)
			{
				bytesOut[i][j] = subByte(bytesIn[i][j]);			// Perform subByte on element inbytesIn and store in bytesOut
			}
		}
		return bytesOut;											// Return bytesOut
	}
	/*********************************************************************
	 *********************************************************************
	 invSubByte takes the byte and uses the lookup table to find the original
	 value
	 *********************************************************************
	 *********************************************************************/
	public static int invSubByte(int byteIn)
	{
		String byteToHex = String.format("%02X", byteIn);			// Turn byte into hexadecimal representation
		int r = (Integer.decode("0x0" + byteToHex.charAt(0)));		// Turns hexadecimal into decimal (row we need)
		int c = (Integer.decode("0x0" + byteToHex.charAt(1)));		// Turns hexadecimal into decimal (column we need)
		return invSBox[r][c];										// Returns value at row r, column c in invSBox
	}
	/*********************************************************************
	 *********************************************************************
	 invSubWord uses invSubByte to decode each of the bytes in the word given
	 *********************************************************************
	 *********************************************************************/
	public static int[] invSubWord(int[] wordIn)
	{
		int[] wordOut = new int[4];									// Create a new int array
		for(int i = 0; i < 4; i++)
		{
			wordOut[i] = wordIn[i];									// Copy the input
			wordOut[i] = invSubByte(wordOut[i]);					// Perform invSubByte on wordOut's copy
		}
		return wordOut;
	}
	/*********************************************************************
	 *********************************************************************
	 Performs invSubBytes on a 4x4 array, returns a new 4x4 array
	 *********************************************************************
	 *********************************************************************/
	public static int[][] invSubBytes(int[][] bytesIn){
		int[][] bytesOut = new int[4][4];							// Create a new 4x4 int array
		for(int i = 0; i < 4; i++)
		{
			for (int j = 0; j < 4; j++)
			{
				bytesOut[i][j] = invSubByte(bytesIn[i][j]);			// invSubByte on each element
			}
		}
		return bytesOut;
	}

	/*********************************************************************
	 *********************************************************************
	 Rotword takes a 4 byte array and puts the first byte on the end and
	 returns a new array
	 Rotwordright takes a 4 byte array and puts the last byte on the front
	 returns a new array
	 *********************************************************************
	 *********************************************************************/

	public static int[] rotWord(int[] wordIn)
	{
		int[] wordOut = new int[4];									// Create a new array which will be returned
		int temp = wordIn[0];										// save element that will be written over
		for(int i = 0; i < 4; i++)
		{
			wordOut[i] = wordIn[i];									// copy each element that in to new array
		}
		for(int i = 0;i<3;i++)										// move each element to its left
		{
			wordOut[i] = wordOut[i+1];
		}
		wordOut[3] = temp;											// place the saved element at the end (bar the first element)
		return wordOut;
	}

	public static int[] rotWordRight(int[] wordIn)
	{
		int[] wordOut = new int[4];									// create a new array of size 4
		int temp = wordIn[3];										// temporarily hold element which will be written over
		for(int i = 0; i < 4; i++)									// copy elements in wordIn to a new array
		{
			wordOut[i] = wordIn[i];
		}
		for(int i = 3;i>0;i--)										// move each element to its left, (bar the last element)
		{
			wordOut[i] = wordOut[i-1];
		}
		wordOut[0] = temp;											// place last element's value in the first index
		return wordOut;
	}

	/*********************************************************************
	 *********************************************************************
	 Shift rows performs a single rot word on the second row of a 2-d
	 matrix, 2 rotwords on the third row of the matrix and 3 rotWords on 
	 the fourth row of the matrix. Inverse shift rows does the same thing
	 but using rotWordRight instead.
	 *********************************************************************
	 *********************************************************************/

	public static int[][] shiftRows(int[][] stateIn)
	{
		int[][] output = new int[4][4];								// Crate new 4x4 in array
		for (int i = 0; i<4; i++) 
		{
			output[0][i] = stateIn[0][i];							// Copy first row of stateIn into output
		}
		// row 2 shift left by 1
		output[1] = rotWord(stateIn[1]);
		// row 3 shift left by 2
		output[2] = rotWord(stateIn[2]);
		output[2] = rotWord(output[2]);
		//row 4 shift left by 3
		output[3] = rotWord(stateIn[3]);
		output[3] = rotWord(output[3]);
		output[3] = rotWord(output[3]);
		return output;
	}

	public static int[][] invShiftRows(int[][] stateIn)
	{
		int[][] output = new int[4][4];									// Create a new 4x4 int array
		for (int i = 0; i<4; i++) 
		{
			output[0][i] = stateIn[0][i];								// Copy first row of stateIn into output
		}
		// Row 2 shift right by 1
		output[1] = rotWordRight(stateIn[1]);
		// Row 3 shift right by 2
		output[2] = rotWordRight(stateIn[2]);
		output[2] = rotWordRight(output[2]);
		// Row 4 shift right by 3
		output[3] = rotWordRight(stateIn[3]);
		output[3] = rotWordRight(output[3]);
		output[3] = rotWordRight(output[3]);
		return output;
	}

	/*********************************************************************
	 *********************************************************************
	 Takes a binary string and alters 1 bit each time, until all bits have 
	 been altered by 1. Returned ArrayList's first element is the original
	 String, with each consecutive elemtent having the next bit altered 
	 from the left
	 *********************************************************************
	 *********************************************************************/
	public static ArrayList<int[][]> avFlipBit(String input)
	{
		ArrayList<int[][]> returnList = new ArrayList<int[][]>();		// Create an ArrayList of type int[][] which will be populated with the altered strings
		// for 128 bits
		String original = input;										// Create a copy of the original input
		returnList.add(stringToArray(original));						// Add original input to returnList
		String copyString = "";											// Instantiate a String that the new strings will be put into
		if(input.charAt(0) == '0')										// Change first bit
		{
			copyString = "1";
			copyString+=input.substring(1);
		}
		else
		{
			copyString="0";
			copyString+=input.substring(1);	
		}
		returnList.add(stringToArray(copyString));						// Add to returnList after it is turned in to 4x4 array
		for(int i=1;i<127;i++)											// For all of the other remaining bits other than the last one
		{
			if(input.charAt(i) == '0')									// Change the bit at i
			{
				copyString = input.substring(0,i);
				copyString+="1";
				copyString+= input.substring(i+1);
			}
			else
			{
				copyString = input.substring(0,i);
				copyString+="0";
				copyString+= input.substring(i+1);
			}
			returnList.add(stringToArray(copyString));					// Add to returnList
		}
		if(input.charAt(127) == '0')									// Alter the last bit
		{
			copyString = input.substring(0,127);
			copyString+="1";
		}
		else
		{
			copyString = input.substring(0,127);
			copyString+="0";
		}
		returnList.add(stringToArray(copyString));						// Add to returnList
		return returnList;
	}

	public static int[][] stringToArray(String input)					// Takes a 128 bit string, turns it into a 4x4 array of each element decimal representation of 8 bits
	{
		int[][] returnMe = new int[4][4];								// Instantiate new 4x4 array
		String origInput = input;										// Copy input
		String word = "";												// Instantiate new string
		int l = 0; int m = 0;											// Used to keep track of rows and columns
		for (int i = 0; i<16; i++) 
		{
			word = "";													// Reset word as a new string
			for (int j = 0; j<8; j++) 
			{
				word += origInput.charAt(0);							// Add charAt(0) to word
				origInput = origInput.substring(1);						// Remove charAt(0) from origInput
			}
			returnMe[l][m] = Integer.parseInt(word, 2);					// Turn binary to decimal representation
			if((i+1)%4 == 0 && i != 0)									// Keep track of column count
			{
				m++;													// Go to new column
				l = 0;													// Reset row count
			}
			else
			{
				l++;													// Go to new row
			}
		}
		return returnMe;
	}

	public static String matrixToString(int[][] input)					// Turns a 4x4 matrixx into a String, by columns
	{
		String s ="";													// Instantiate new String
		for(int i=0;i<4;i++)
		{
			for(int j=0; j<4;j++)
			{
				s+=String.format("%8s", Integer.toBinaryString(input[j][i])).replace(' ', '0'); // turns integer to 8 bit binary number, add it on to the end of the string
			}
		}
		return s; 														// Return string
	}

	public static int bitsDifferent(String s1, String s2)				// Counts how many bits are different in two 128 bit strings
	{
		int count = 0;													// Instanitate a counter
		for (int i = 0; i<128; i++) {									// For each bit of the strings
			if(s1.charAt(i) != s2.charAt(i))							// Compare them, if they are not equal
			{
				count++;												// Increment counter
			}
		}
		return count;													// Return counter
	}
}